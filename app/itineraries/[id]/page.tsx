import { redirect } from "next/navigation"
import { createClient } from "@/lib/supabase/server"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Leaf, MapPin, DollarSign, TrendingDown, Utensils, Hotel, Navigation } from "lucide-react"
import Link from "next/link"
import { revalidatePath } from "next/cache"

export default async function ItineraryDetailPage({ params }: { params: { id: string } }) {
  const supabase = await createClient()

  const {
    data: { user },
    error,
  } = await supabase.auth.getUser()

  if (error || !user) {
    redirect("/auth/login")
  }

  // Fetch itinerary details
  const { data: itinerary } = await supabase
    .from("itineraries")
    .select(
      `
      *,
      trips (*)
    `,
    )
    .eq("id", params.id)
    .single()

  if (!itinerary) {
    redirect("/dashboard")
  }

  // Fetch guide profile separately if guide_id exists
  let guideProfile = null
  if (itinerary.guide_id) {
    const { data: profile } = await supabase
      .from("profiles")
      .select("display_name")
      .eq("id", itinerary.guide_id)
      .single()
    guideProfile = profile
  }

  const itineraryData = itinerary.itinerary_data

  async function acceptItinerary() {
    "use server"

    const supabase = await createClient()

    console.log("[v0] Accepting itinerary:", params.id)

    // Update itinerary status to accepted
    const { error } = await supabase.from("itineraries").update({ status: "accepted" }).eq("id", params.id)

    if (error) {
      console.error("[v0] Error accepting itinerary:", error)
      throw new Error("Failed to accept itinerary")
    }

    console.log("[v0] Itinerary accepted successfully")

    // Revalidate the trip page to show updated status
    revalidatePath(`/trips/view/${itinerary.trip_id}`)

    // Redirect back to trip page
    redirect(`/trips/view/${itinerary.trip_id}`)
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <Link href="/" className="flex items-center gap-2">
            <Leaf className="h-8 w-8 text-primary" />
            <span className="text-2xl font-mono font-bold text-foreground">GreenRoute</span>
          </Link>
          <Link href={`/trips/view/${itinerary.trip_id}`}>
            <span className="text-sm text-muted-foreground hover:text-foreground transition-colors">Back to Trip</span>
          </Link>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-5xl">
        {/* Itinerary Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-mono font-bold mb-2">
            {itinerary.is_ai_generated ? "AI-Generated" : "Custom"} Eco-Itinerary
          </h1>
          <p className="text-muted-foreground mb-6">
            {itinerary.is_ai_generated
              ? "Generated by GreenRoute AI"
              : `Proposed by ${guideProfile?.display_name || "Guide"}`}
          </p>

          {/* Summary Card */}
          {itineraryData?.summary && (
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="font-mono">Trip Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground leading-relaxed">{itineraryData.summary}</p>
              </CardContent>
            </Card>
          )}

          {/* Carbon Impact */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-3">
                  <TrendingDown className="h-5 w-5 text-primary" />
                  <div>
                    <div className="text-sm text-muted-foreground">Your Carbon Footprint</div>
                    <div className="text-2xl font-mono font-bold text-primary">
                      {itineraryData?.totalCarbonFootprint || 0} kg
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-3">
                  <TrendingDown className="h-5 w-5 text-muted-foreground" />
                  <div>
                    <div className="text-sm text-muted-foreground">Conventional Travel</div>
                    <div className="text-2xl font-mono font-bold">
                      {itineraryData?.conventionalCarbonFootprint || 0} kg
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="border-2 border-green-500">
              <CardContent className="pt-6">
                <div className="flex items-center gap-3">
                  <TrendingDown className="h-5 w-5 text-green-500" />
                  <div>
                    <div className="text-sm text-muted-foreground">Carbon Saved</div>
                    <div className="text-2xl font-mono font-bold text-green-500">
                      {itineraryData?.carbonSavings || 0} kg
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {itineraryData?.totalEstimatedCost && (
            <Card className="mb-6">
              <CardContent className="pt-6">
                <div className="flex items-center gap-3">
                  <DollarSign className="h-5 w-5 text-primary" />
                  <div>
                    <div className="text-sm text-muted-foreground">Total Estimated Cost</div>
                    <div className="text-2xl font-mono font-bold">${itineraryData.totalEstimatedCost}</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Daily Itinerary */}
        {itineraryData?.dailyItinerary && (
          <div className="space-y-6">
            <h2 className="text-2xl font-mono font-bold">Day-by-Day Plan</h2>

            {itineraryData.dailyItinerary.map((day: any) => (
              <Card key={day.day} className="border-2">
                <CardHeader>
                  <CardTitle className="font-mono">
                    Day {day.day} - {new Date(day.date).toLocaleDateString()}
                  </CardTitle>
                  <CardDescription>
                    Carbon: {day.totalDayCarbon} kg CO₂ • Cost: ${day.totalDayCost}
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Activities */}
                  <div>
                    <h3 className="font-semibold mb-3 flex items-center gap-2">
                      <MapPin className="h-4 w-4" />
                      Activities
                    </h3>
                    <div className="space-y-4">
                      {day.activities?.map((activity: any, idx: number) => (
                        <div key={idx} className="pl-4 border-l-2 border-primary">
                          <div className="flex items-start justify-between mb-1">
                            <div>
                              <span className="text-xs uppercase text-muted-foreground">{activity.time}</span>
                              <h4 className="font-semibold">{activity.title}</h4>
                            </div>
                            <span className="text-sm text-muted-foreground">${activity.cost}</span>
                          </div>
                          <p className="text-sm text-muted-foreground mb-2">{activity.description}</p>
                          <div className="flex items-center gap-4 text-xs text-muted-foreground">
                            <span className="flex items-center gap-1">
                              <Navigation className="h-3 w-3" />
                              {activity.transportation}
                            </span>
                            <span className="flex items-center gap-1">
                              <TrendingDown className="h-3 w-3" />
                              {activity.carbonImpact} kg CO₂
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Accommodation */}
                  {day.accommodation && (
                    <div>
                      <h3 className="font-semibold mb-3 flex items-center gap-2">
                        <Hotel className="h-4 w-4" />
                        Accommodation
                      </h3>
                      <div className="pl-4 border-l-2 border-primary">
                        <div className="flex items-start justify-between mb-1">
                          <div>
                            <h4 className="font-semibold">{day.accommodation.name}</h4>
                            <span className="text-sm text-muted-foreground capitalize">{day.accommodation.type}</span>
                          </div>
                          <span className="text-sm text-muted-foreground">${day.accommodation.cost}</span>
                        </div>
                        <div className="flex items-center gap-2 mt-2">
                          <span className="text-xs px-2 py-1 rounded-full bg-primary/10 text-primary">
                            Eco Rating: {day.accommodation.ecoRating}/5
                          </span>
                        </div>
                        {day.accommodation.sustainableFeatures && (
                          <div className="flex flex-wrap gap-1 mt-2">
                            {day.accommodation.sustainableFeatures.map((feature: string, idx: number) => (
                              <span key={idx} className="text-xs px-2 py-1 rounded-full bg-muted text-muted-foreground">
                                {feature}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Meals */}
                  {day.meals && day.meals.length > 0 && (
                    <div>
                      <h3 className="font-semibold mb-3 flex items-center gap-2">
                        <Utensils className="h-4 w-4" />
                        Meals
                      </h3>
                      <div className="space-y-2">
                        {day.meals.map((meal: any, idx: number) => (
                          <div key={idx} className="pl-4 border-l-2 border-primary flex items-center justify-between">
                            <div>
                              <span className="text-xs uppercase text-muted-foreground">{meal.type}</span>
                              <h4 className="font-semibold text-sm">{meal.restaurant}</h4>
                              <span className="text-xs text-muted-foreground">
                                {meal.cuisine} {meal.isLocal && "• Local"}
                              </span>
                            </div>
                            <span className="text-sm text-muted-foreground">${meal.cost}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Sustainability Tips */}
        {itineraryData?.sustainabilityTips && itineraryData.sustainabilityTips.length > 0 && (
          <Card className="mt-6 border-2 border-primary">
            <CardHeader>
              <CardTitle className="font-mono flex items-center gap-2">
                <Leaf className="h-5 w-5 text-primary" />
                Sustainability Tips
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {itineraryData.sustainabilityTips.map((tip: string, idx: number) => (
                  <li key={idx} className="flex items-start gap-2">
                    <span className="text-primary mt-1">•</span>
                    <span className="text-muted-foreground">{tip}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}

        {/* Action Buttons */}
        <div className="mt-8 flex gap-4">
          <Link href={`/trips/view/${itinerary.trip_id}`} className="flex-1">
            <Button variant="outline" className="w-full bg-transparent">
              Back to Trip
            </Button>
          </Link>
          <form action={acceptItinerary} className="flex-1">
            <Button type="submit" className="w-full">
              Accept Itinerary
            </Button>
          </form>
        </div>
      </div>
    </div>
  )
}
